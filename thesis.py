# -*- coding: utf-8 -*-
"""
Created on Wed Apr  6 11:39:10 2022

@author: pbuttles
"""

#from manimlib import *
from manim import *

class quasiclassical_derivation(Scene):
    def construct(self):
        Cdef = Tex(r"$C=\frac{A_C\varepsilon_r\varepsilon_0}{d}$")
        Rdef = Tex(r"$R=\frac{\rho L}{A_R}$")#=\frac{L}{\sigma A_R}$")
        Rdef1 = Tex(r"$R=\frac{L}{\sigma A_R}$")
        Cdef.set_color(RED)
        Rdef.set_color(BLUE)
        Rdef1.set_color(BLUE)
        Cdef.shift(UP*0.5)
        Rdef.next_to(Cdef,direction=DOWN,buff=0.1)
        Rdef1.next_to(Cdef,direction=DOWN,buff=0.1)
        self.wait(1)
        self.play(Write(Cdef))
        self.wait(10)
        self.play(Write(Rdef))
        self.wait(10)
        self.play(TransformMatchingShapes(Rdef,Rdef1,path_arc=0))
        components = VGroup(Cdef,Rdef1)
        self.wait(1)
        self.play(components.animate.to_edge(UP,buff=1))
        
        summinginparallel = Text(r"Summing Impedance in Parallel RC Circuit")
        ZR = Tex(r"$\mathcal{Z}$",r"$_R$",r"$=R$")
        ZC = Tex(r"$\mathcal{Z}$",r"$_C$",r"$=\frac{1}{j\omega C}$")
        ZC.shift(DOWN*1)
        ZR.shift(DOWN*1.7)
        self.play(FadeIn(summinginparallel))
        self.wait(5)
        self.play(Write(ZC),Write(ZR))
        self.play(FadeOut(summinginparallel))
        
        zparallel = Tex(r"$\frac{1}{\mathcal{Z}}=\frac{1}{\mathcal{Z}_{R}} + \frac{1}{\mathcal{Z}_{C}}$")
        zparallel2 = Tex(r"$\frac{1}{\mathcal{Z}}=\frac{1}{R} + j\omega C$")
        zparallel3 = Tex(r"$\frac{1}{\mathcal{Z}}=$",r"$\frac{\sigma A_R}{L}$",r"$ + $",r"$j$",r"$\omega\frac{A_C\varepsilon_r\varepsilon_0}{d}$")
        zparallel3[1].set_color(BLUE)
        zparallel3[4].set_color(RED)
        impgroup1=VGroup(zparallel,ZR,ZC)
        impgroup2=VGroup(zparallel2,Cdef,Rdef1)
        
        self.wait(3)
        self.play(Write(zparallel))
        self.wait(8)
        self.play(TransformMatchingShapes(impgroup1,zparallel2))
        self.wait(5)
        self.play(TransformMatchingShapes(impgroup2,zparallel3))
        #self.play(zparallel3.animate.shift(UP))
        self.wait(1)
        self.play(zparallel3.animate.shift(UP*2))
        self.wait(1)
        
        impbydef = Text(r"Impedance by Complex Definition")
        impbydef.shift(UP*0.5)
        impdef = Tex(r"$\mathcal{Z}=$",r"$\mathcal{Z}_{real}$",r"$+$",r"$j$",r"$\mathcal{Z}_{imag}$")
        impdef[1].set_color(BLUE)
        impdef[4].set_color(RED)
        impdef.shift(DOWN*0.5)
        self.play(FadeIn(impbydef))
        self.wait(3)
    
        self.play(Write(impdef))
        self.play(FadeOut(impbydef))
        self.wait(3)
        impinveq = Tex(r"$\frac{1}{\mathcal{Z}} = \frac{1}{\mathcal{Z}_{real} + j\mathcal{Z}_{imag}}$")
        impinveq.shift(DOWN*0.5)
        self.play(TransformMatchingShapes(impdef,impinveq))
        self.wait(5)
        
        impinv = Tex(r"$\frac{1}{\mathcal{Z}} = $",r"$\frac{\mathcal{Z}_{real}}{\mathcal{Z}^2_{real}+\mathcal{Z}^2_{imag}}$",r"$+$",r"$j$",r"$\frac{-\mathcal{Z}_{imag}}{\mathcal{Z}^2_{real}+\mathcal{Z}^2_{imag}}$")
        impinv[1].set_color(BLUE)
        impinv[4].set_color(RED)
        impinv.shift(DOWN*0.5)
        self.play(TransformMatchingShapes(impinveq,impinv))
        self.wait(3)
        
        self.play(zparallel3.animate.shift(DOWN*1.5))
        self.wait(5)
        conductgroup = VGroup(impinv[1],zparallel3[1])
        dielecgroup = VGroup(impinv[4],zparallel3[4])
        removegroup = VGroup(impinv[0],impinv[2],impinv[3],zparallel3[0],zparallel3[2],zparallel3[3])
        sigmaeq = Tex(r"$\frac{\sigma A_R}{L} = \frac{\mathcal{Z}_{real}}{\mathcal{Z}^2_{real}+\mathcal{Z}^2_{imag}}$")
        sigmaeq.set_color(BLUE)
        sigmaeq.shift(UP*0.5)
        epsiloneq = Tex(r"$\omega\frac{A_C\varepsilon_r\varepsilon_0}{d} = \frac{-\mathcal{Z}_{imag}}{\mathcal{Z}^2_{real}+\mathcal{Z}^2_{imag}}$")
        epsiloneq.set_color(RED)
        epsiloneq.shift(DOWN*0.5)
        self.play(TransformMatchingShapes(conductgroup,sigmaeq), TransformMatchingShapes(dielecgroup,epsiloneq),FadeOut(removegroup))
        self.wait(7)
        
        sigma = Tex(r"$\sigma = \frac{\mathcal{Z}_{real}L}{A_R(\mathcal{Z}^2_{real}+\mathcal{Z}^2_{imag})}$")
        sigma.set_color(BLUE)
        sigma.shift(UP*0.5)
        epsilon = Tex(r"$\varepsilon_r = \frac{-\mathcal{Z}_{imag}d}{\omega A_C \varepsilon_0 (\mathcal{Z}^2_{real}+\mathcal{Z}^2_{imag})}$")
        epsilon.set_color(RED)
        epsilon.shift(DOWN*0.5)
        self.play(TransformMatchingShapes(sigmaeq,sigma),TransformMatchingShapes(epsiloneq,epsilon))
        self.wait(7)
        
        simplify = Tex(r"\textnormal{Assume} $A_R\approx A_C$, $L\approx d$")
        simplify.shift(DOWN*2)
        self.play(FadeIn(simplify))
        sigma1 = Tex(r"$\sigma = \frac{\mathcal{Z}_{real}d}{A(\mathcal{Z}^2_{real}+\mathcal{Z}^2_{imag})}$")
        sigma1.set_color(BLUE)
        sigma1.shift(UP*0.5)
        epsilon1 = Tex(r"$\varepsilon_r = \frac{-\mathcal{Z}_{imag}d}{\omega A \varepsilon_0 (\mathcal{Z}^2_{real}+\mathcal{Z}^2_{imag})}$")
        epsilon1.set_color(RED)
        epsilon1.shift(DOWN*0.5)
        self.wait(25)
        self.play(TransformMatchingShapes(sigma,sigma1),TransformMatchingShapes(epsilon,epsilon1),FadeOut(simplify))
        self.wait(1)
        self.play(ApplyWave(sigma1),ApplyWave(epsilon1))
        self.wait(1)